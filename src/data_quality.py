import pandera as pa
from pandera import Column, Check


def validate_data(merged_df, schema):
    try:
        validated_df = schema.validate(merged_df, lazy=True)
        return validated_df, None
    except pa.errors.SchemaErrors as err:
        # Collect error messages
        error_df = err.failure_cases
        return None, error_df
    
schema = pa.DataFrameSchema({
    "Filename": Column(pa.String),
    "VYPLNIL": Column(pa.String, nullable=True),
    "HOSPITAL": Column(pa.String, nullable=True),
    "BIRTH_YEAR": Column(pa.Int32, Check.in_range(1900, 2025), nullable=True),
    "BIRTH_MNTH": Column(pa.Int32, Check.in_range(1, 12), nullable=True),
    "BIRTH_DAY": Column(pa.Int32, Check.in_range(1, 31), nullable=True),
    "NO_BABY": Column(pa.Int32, nullable=True),
    "NO_ENEW": Column(pa.Int32, nullable=True),
    "GT_WEEK": Column(pa.Int32, Check.in_range(22, 42), nullable=True),
    "GT_DAY": Column(pa.Int32, Check.in_range(0, 6), nullable=True),
    "SURNAME": Column(pa.String, nullable=True),
    "NAME": Column(pa.String, nullable=True),
    "SEX": Column(pa.Int32, Check.isin([1, 2]), nullable=True),  # 1=Male, 2=Female
    "BIRTH_WGHT": Column(pa.Float64, Check.in_range(300, 6000), nullable=True),  # Weight in grams
    "BIRTH_LGHT": Column(pa.Float64, Check.in_range(20, 60), nullable=True),    # Length in cm
    "BIRTH_HEAD": Column(pa.Float64, Check.in_range(20, 45), nullable=True),    # Head circumference in cm
    "MULTIPLE": Column(pa.Int32, Check.isin([0, 1]), nullable=True),  # 0=No, 1=Yes
    "N_FETUS": Column(pa.Int32, Check.in_range(1, 5), nullable=True),
    "DR_ORDER": Column(pa.Int32, nullable=True),
    "BIRTH_LOC": Column(pa.Int32, nullable=True),
    "BIRTH_CITY": Column(pa.Int32, nullable=True),
    "ADMIT_HOUR": Column(pa.Int32, Check.in_range(0, 23), nullable=True),
    "ADMIT_MIN": Column(pa.Int32, Check.in_range(0, 59), nullable=True),
    "VFN_REHOSP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),  # 0=No, 1=Yes
    "DIS_YEAR": Column(pa.Int32, Check.in_range(1900, 2025), nullable=True),
    "DIS_MONTH": Column(pa.Int32, Check.in_range(1, 12), nullable=True),
    "DIS_DAY": Column(pa.Int32, Check.in_range(1, 31), nullable=True),
    "DELIV_MODE": Column(pa.Int32, nullable=True),
    "SC_ANAEST": Column(pa.Int32, nullable=True),
    "DR_OXY": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_CPAP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_HFNC": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_PPV": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_ETI": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_ADR": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_SURF": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_HEART": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DR_DEATH": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "APGAR_1": Column(pa.Int32, Check.in_range(0, 10), nullable=True),
    "APGAR_5": Column(pa.Int32, Check.in_range(0, 10), nullable=True),
    "APGAR_10": Column(pa.Int32, Check.in_range(0, 10), nullable=True),
    "STER_NO": Column(pa.Int32, nullable=True),
    "STER_COMPL": Column(pa.Int32, nullable=True),
    "STER_EXP": Column(pa.Int32, nullable=True),
    "SURF_NO": Column(pa.Int32, nullable=True),
    "SURF_HR": Column(pa.Int32, Check.in_range(0, 23), nullable=True),
    "SURF_MIN": Column(pa.Int32, Check.in_range(0, 59), nullable=True),
    "IC_NIVENT": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_OXY": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_HFNC": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_CPAP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_NIVNAVA": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_DUOPAP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_ETI": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_CONVENT": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_NAVAINV": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_HFOV": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_INO": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_DAY_INV": Column(pa.Int32, Check.in_range(0, 100), nullable=True),
    "IC_DAY_NIV": Column(pa.Int32, Check.in_range(0, 100), nullable=True),
    "IC_DAY_HFN": Column(pa.Int32, Check.in_range(0, 100), nullable=True),
    "IC_DAY_PN": Column(pa.Int32, Check.in_range(0, 100), nullable=True),
    "IC_HYDROC": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_DEXA": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_RESP_ST": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_RAI_ST": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IC_OTH_ST": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "PDA_LIG": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "PDA_INDO": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "PDA_IBU": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "PDA_PARAC": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "PDA_TH": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "ROP_EXAM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "ROP_GR": Column(pa.Int32, Check.in_range(0, 5), nullable=True),
    "ROP_PLUS": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "ROP_TH": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "NEC_LAPAR": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "SIP_LAPAR": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LAPAR": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "OTHER_SURG": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "OTHER_TEXT": Column(pa.String, nullable=True),
    "USG_HEAD": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "IVH_GRADE": Column(pa.Int32, Check.in_range(0, 4), nullable=True),
    "IVH_INDO": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "CPVL": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LIQ_LP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LIQ_OMMAYA": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LIQ_VPSHNT": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "NDYN_VMEG": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "OXY_28D": Column(pa.Int32, Check.isin([0, 1, 2]), nullable=True),  # Assuming 0=No,1=Yes,2=Unknown
    "OXY_36W": Column(pa.Int32, Check.isin([0, 1, 2]), nullable=True),
    "DDOT": Column(pa.Int32, nullable=True),
    "AIR_PNO": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "AIR_PIE": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "AIR_OTHER": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "BPD_HIG": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "BPD_JEN": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "EOS": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "EOS_BACT": Column(pa.String, nullable=True),
    "EOM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "EOM_BACT": Column(pa.String, nullable=True),
    "LOS": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LOS_BACT": Column(pa.String, nullable=True),
    "LOS_MORE": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LOM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "LOM_BACT": Column(pa.String, nullable=True),
    "VVV": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "VVV1": Column(pa.String, nullable=True),
    "VVV2": Column(pa.String, nullable=True),
    "VVV3": Column(pa.String, nullable=True),
    "VVV4": Column(pa.String, nullable=True),
    "VVV5": Column(pa.String, nullable=True),
    "DIS_TO": Column(pa.Int32, nullable=True),
    "DIS_DAYS": Column(pa.Int32, nullable=True),
    "DIS_WGHT": Column(pa.Float64, Check.in_range(300, 6000), nullable=True),
    "DIS_LGHT": Column(pa.Float64, Check.in_range(20, 60), nullable=True),
    "DIS_HEAD": Column(pa.Float64, Check.in_range(20, 45), nullable=True),
    "DIS_FEED": Column(pa.String, nullable=True),
    "DIS_TPN": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DIS_VMM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DIS_FORM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DIS_CMM": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "DIS_FM85": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "TRANSPORT": Column(pa.String, nullable=True),
    "DTH_DAYS": Column(pa.Int32, nullable=True),
    "DTH_HR": Column(pa.Int32, nullable=True),
    "DTH_CAUSE": Column(pa.Int32, nullable=True),
    "DTH_LIMIT": Column(pa.Int32, nullable=True),
    "DTH_AUTOPS": Column(pa.Int32, nullable=True),
    "APOPLEXP": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
    "SIP": Column(pa.String, nullable=True),
    "NEC": Column(pa.String, nullable=True),
    "infekce": Column(pa.String, nullable=True),  # If multiple, consider splitting into separate columns
    "PDA_PROFY": Column(pa.Int32, Check.isin([0, 1]), nullable=True),
})